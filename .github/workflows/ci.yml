name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Re-use node_modules between runs until package-lock.json changes.
      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}
      
      - name: Cache codegen node_modules
        id: cache-codegen-node_modules
        uses: actions/cache@v2
        with:
          path: codegen/node_modules
          key: node_modules-${{ hashFiles('codegen/package-lock.json') }}

      # Re-use ~/.elm between runs until elm.json, elm-tooling.json or
      # review/elm.json changes. The Elm compiler saves downloaded Elm packages
      # to ~/.elm, and elm-tooling saves downloaded tool executables there.
      - name: Cache ~/.elm
        uses: actions/cache@v2
        with:
          path: ~/.elm
          key: elm-${{ hashFiles('elm.json', 'elm-tooling.json', 'codegen/elm.json', 'codegen/elm-tooling.json', 'codegen/elm.codegen.json', 'review/elm.json') }}

      # Install npm packages, unless we restored them from cache.
      # Since `npm ci` removes the node_modules folder before running it’s
      # important to skip this step if cache was restored.
      - name: npm ci
        if: steps.cache-node_modules.outputs.cache-hit != 'true' && steps.cache-codegen-node_modules.outputs.cache-hit != 'true'
        env:
          # If you have a `"postinstall": "elm-tooling install"` script in your
          # package.json, this turns it into a no-op. We’ll run it in the next
          # step because of the caching. If elm-tooling.json changes but
          # package-lock.json does not, the postinstall script needs running
          # but this step won’t.
          NO_ELM_TOOLING_INSTALL: 1
        run: npm ci && cd codegen && npm ci

      - name: elm-tooling install
        run: npx --no-install elm-tooling install && cd codegen && npx --no-install elm-tooling install

      - name: elm-codegen install
        run: npm run generate-helpers

      - name: Tests
        run: npm test

      - name: elm-format
        uses: sparksp/elm-format-action@v1
        with:
          elm_format: npx elm-format

      - name: elm-review
        uses: sparksp/elm-review-action@v1.0.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          elm_review: npx --no-install elm-review

      - name: codegen elm-format
        uses: sparksp/elm-format-action@v1
        with:
          working-directory: codegen
          elm_format: npx elm-format
          elm_files: |
            src/**/*.elm
            !Gen/**/*.elm
          elm_glob: true

      - name: codegen elm-review
        uses: sparksp/elm-review-action@v1.0.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          working-directory: codegen
          elm_review: npx --no-install elm-review

      - name: Build elm docs
        id: docs
        continue-on-error: true
        run: npx --no-install elm make --docs docs.json

      # - name: Elm Publish
      #   uses: dillonkearns/elm-publish-action@v1
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-elm: ./node_modules/.bin/elm

      # - run: npm run build

      # - id: npm-publish
      #   if: github.ref == 'refs/heads/master'
      #   uses: JS-DevTools/npm-publish@v1
      #   with:
      #     token: ${{ secrets.NPM_TOKEN }}
